name: Documentation

on:
  push:
    branches: [ master ]

env:
  BUILD_TYPE: Debug

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Build repo
        run: |
          cmake -DTARGET_GROUP=test -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DOPTIMIZE=1 .
          make -j 2

      - name: Run tests
        run: |
          ctest --verbose &> unit-test-report.txt
          cat unit-test-report.txt

      - name: Upload unit test report
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-report
          path: ./unit-test-report.txt

  address-sanitizer:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Run address sanitizer
        continue-on-error: true
        run: |
          find ./src -iname '*.c' | xargs clang-12 -fsanitize=address -O1 -fno-omit-frame-pointer -I external/uthash/src -I include -DNDEBUG=1 -Wno-unknown-warning-option -g
          ./a.out &> address-sanitizer-report.txt
          cat address-sanitizer-report.txt

      - name: Upload address sanitizer report
        uses: actions/upload-artifact@v2
        with:
          name: address-sanitizer-report
          path: address-sanitizer-report.txt

  memory-sanitizer:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Run memory sanitizer
        continue-on-error: true
        run: |
          find ./src -iname '*.c' | xargs clang-12 -fsanitize=memory -fPIE -pie -fno-omit-frame-pointer -g -O2 -I external/uthash/src -I include -DNDEBUG=1 -Wno-unknown-warning-option
          ./a.out &> memory-sanitizer-report.txt
          cat memory-sanitizer-report.txt

      - name: Upload memory sanitizer report
        uses: actions/upload-artifact@v2
        with:
          name: memory-sanitizer-report
          path: memory-sanitizer-report.txt

  UB-sanitizer:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Run UB sanitizer
        continue-on-error: true
        run: |
          find ./src -iname '*.c' | xargs clang-12 -fsanitize=undefined -I external/uthash/src -I include -DNDEBUG=1 -Wno-unknown-warning-option 
          ./a.out &> ub-sanitizer-report.txt
          cat ub-sanitizer-report.txt

      - name: Upload UB sanitizer report
        uses: actions/upload-artifact@v2
        with:
          name: ub-sanitizer-report
          path: ub-sanitizer-report.txt

  valgrind:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install valgrind
        run: |
          sudo apt update
          sudo apt install valgrind -y

      - name: Run valgrind
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DDONT_LINK_TCMALLOC=1 .
          make -j 2
          valgrind --leak-check=yes ./yaser &> valgrind-report.txt
          cat valgrind-report.txt

      - name: Upload valgrind report
        uses: actions/upload-artifact@v2
        with:
          name: valgrind-report
          path: valgrind-report.txt

  complexity:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install GNU Complexity
        run: |
          sudo apt update
          sudo apt install complexity -y

      - name: Run complexity
        run: |
          find ./src -iname '*.c' | xargs complexity --histogram --score --threshold=0 &> complexity-report.txt
          cat complexity-report.txt

      - name: Upload complexity report
        uses: actions/upload-artifact@v2
        with:
          name: complexity-report
          path: complexity-report.txt

  code-coverage:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install lcov
        run: |
          sudo apt update
          sudo apt install lcov -y

      - name: Run gcov
        run: |
          cd test
          find ../src/* assignments -iname '*.c' ! -iname 'main.c' | xargs gcc -o main_assignments_test -fprofile-arcs -ftest-coverage -g -O0 -I../external/uthash/src -I../external/Unity/src -I../include -Iassignments ../external/Unity/src/unity.c
          ./main_assignments_test
          lcov -c --directory . --output-file main_assignments_test.info
          lcov --remove main_assignments_test.info -o main_assignments_test.info '*/unity.c' '*/test/*' 'defines.h' 'log_common.h' 'clean_up.c' 'log.c'
          genhtml main_assignments_test.info --output-directory gcov-report

      - name: Upload gcov report
        uses: actions/upload-artifact@v2
        with:
          name: gcov-report
          path: ./test/gcov-report

  benchmark:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install Google Benchmark
        run: |
          rm -rf src/main.c
          git clone https://github.com/google/benchmark.git google-benchmark
          cd google-benchmark
          cmake -E make_directory "build"
          cmake -E chdir "build" cmake -DBENCHMARK_ENABLE_GTEST_TESTS=OFF -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../
          cmake --build "build" --config Release
          sudo cmake --build "build" --config Release --target install
          cd ..

      - name: Run benchmark
        run: |
          g++ benchmark/**/*.cpp src/**/*.c -fpermissive -w -std=c++11 -isystem benchmark/include -Iexternal/uthash/src -Iinclude -Lbenchmark/build/src -lbenchmark -lbenchmark_main -lpthread -o yaser_benchmark && ./yaser_benchmark
          ./yaser_benchmark &> benchmark-report.txt

      - name: Upload benchmark report
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-report
          path: benchmark-report.txt

  gnu-profiler:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install gprof2dot
        run: |
          sudo apt update
          sudo apt install python3 graphviz -y
          pip install gprof2dot
          
      - name: Run gcc with profiling flags
        run: |
          find src -iname '*.c' | xargs gcc -w -fno-default-inline -fno-inline -fno-inline-functions -fno-inline-functions-called-once -fno-optimize-sibling-calls -fno-omit-frame-pointer -DNDEBUG -DNYASER_DEBUG -g -pg -O2 -std=c11 -Iexternal/uthash/src -Iinclude -o yaser
          ./yaser || true

      - name: Run gprof2dot
        run: |
          gprof yaser | gprof2dot | dot -Tpng -o gprof-report.png

      - name: Upload gprof report
        uses: actions/upload-artifact@v2
        with:
          name: gprof-report
          path: gprof-report.png

  callgrind:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install valgrind & gprof2dot
        run: |
          sudo apt update
          sudo apt install valgrind -y
          sudo apt install python3 graphviz -y
          pip install gprof2dot

      - name: Run callgrind
        continue-on-error: true
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DOPTIMIZE=1 -DDONT_LINK_TCMALLOC=1 .
          make -j 2
          mkdir callgrind-report
          valgrind --tool=callgrind --cache-sim=yes --branch-sim=yes ./yaser &> callgrind-report/callgrind-report.txt
          cat callgrind-report/callgrind-report.txt

      - name: Run gprof2dot
        run: |
          gprof2dot --format=callgrind callgrind.out.* | dot -Tpng -o callgrind-report/callgrind-report.png

      - name: Upload callgrind report
        uses: actions/upload-artifact@v2
        with:
          name: callgrind-report
          path: callgrind-report

  deploy-docs:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [unit-tests, address-sanitizer, memory-sanitizer, UB-sanitizer, valgrind, complexity, code-coverage, benchmark, gnu-profiler, callgrind]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install doxygen sphinx-doc -y
          pip3 install sphinx-rtd-theme breathe sphinx-sitemap m2r2

      - name: Download reports
        uses: actions/download-artifact@v2
        with:
          path: docs/_static/reports

      - name: Generate docs
        run: |
          cd docs
          make html
          cd _build/html
          touch .nojekyll

      - name: Deploy to GitHub pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: docs/_build/html
